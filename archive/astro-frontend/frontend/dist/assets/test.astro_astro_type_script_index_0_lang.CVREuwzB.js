class c{constructor(t,e,s,i=null){this.test=t,this.success=e,this.message=s,this.data=i,this.timestamp=new Date().toISOString()}timestamp}class u{testResults=[];availableMovies=[];constructor(){this.initializeEventListeners(),this.loadDebugStatus(),this.loadAvailableMovies()}initializeEventListeners(){document.getElementById("test-debug")?.addEventListener("click",()=>this.testDebugStatus()),document.getElementById("test-movies")?.addEventListener("click",()=>this.testMovieList()),document.getElementById("test-search")?.addEventListener("click",()=>this.testMovieSearch()),document.getElementById("test-movie")?.addEventListener("click",()=>this.testMovieDetails()),document.getElementById("test-videos")?.addEventListener("click",()=>this.testMovieVideos()),document.getElementById("test-single-vote")?.addEventListener("click",()=>this.testSingleVote()),document.getElementById("test-batch-vote")?.addEventListener("click",()=>this.testBatchVote()),document.getElementById("test-appeal")?.addEventListener("click",()=>this.testAppealCalculation()),document.getElementById("run-all-tests")?.addEventListener("click",()=>this.runAllTests())}async loadDebugStatus(){await this.testDebugStatus()}async loadAvailableMovies(){try{const t=await this.makeApiCall(window.API_CONFIG.ACTIONS.LIST_MOVIES);this.availableMovies=t.movies||[]}catch(t){console.error("Failed to load available movies:",t)}}async makeApiCall(t,e={},s="GET",i=null){const a=new URL(`${window.API_CONFIG.PROXY_URL}/${t}`);Object.keys(e).forEach(l=>{e[l]!==void 0&&e[l]!==null&&a.searchParams.append(l,e[l].toString())});const n={method:s,headers:{"Content-Type":"application/json"}};i&&(n.body=JSON.stringify(i));const o=await fetch(a.toString(),n);if(!o.ok)throw new Error(`HTTP error! status: ${o.status}`);return await o.json()}addTestResult(t,e,s,i=null){const a=new c(t,e,s,i);this.testResults.push(a),this.updateTestDisplay()}updateTestDisplay(){const t=document.getElementById("test-results");t&&(t.innerHTML=this.testResults.map(e=>`
      <div class="test-result ${e.success?"success":"error"}">
        <div class="test-header">
          <span class="test-name">${e.test}</span>
          <span class="test-status">${e.success?"✓":"✗"}</span>
          <span class="test-time">${new Date(e.timestamp).toLocaleTimeString()}</span>
        </div>
        <div class="test-message">${e.message}</div>
        ${e.data?`<div class="test-data"><pre>${JSON.stringify(e.data,null,2)}</pre></div>`:""}
      </div>
    `).join(""))}async testDebugStatus(){try{const t=await this.makeApiCall(window.window.API_CONFIG.ACTIONS.DEBUG);this.addTestResult("Debug Status",!0,`Debug mode is ${t.debug?"enabled":"disabled"}`,t)}catch(t){this.addTestResult("Debug Status",!1,`Failed to get debug status: ${t}`,t)}}async testMovieList(){try{const t=await this.makeApiCall(window.API_CONFIG.ACTIONS.LIST_MOVIES),e=t.movies?.length||0;this.addTestResult("Movie List",!0,`Successfully loaded ${e} movies`,{count:e,sample:t.movies?.slice(0,3)})}catch(t){this.addTestResult("Movie List",!1,`Failed to load movies: ${t}`,t)}}async testMovieSearch(){try{const t="test",e=await this.makeApiCall(window.window.API_CONFIG.ACTIONS.SEARCH,{query:t}),s=e.results?.length||0;this.addTestResult("Movie Search",!0,`Search for "${t}" returned ${s} results`,{searchTerm:t,count:s,sample:e.results?.slice(0,3)})}catch(t){this.addTestResult("Movie Search",!1,`Search failed: ${t}`,t)}}async testMovieDetails(){if(this.availableMovies.length===0){this.addTestResult("Movie Details",!1,"No movies available for testing",null);return}try{const t=this.availableMovies[0],e=await this.makeApiCall(window.window.API_CONFIG.ACTIONS.MOVIE,{id:t.id});this.addTestResult("Movie Details",!0,`Successfully loaded details for "${t.title}"`,{movieId:t.id,title:t.title,details:e})}catch(t){this.addTestResult("Movie Details",!1,`Failed to load movie details: ${t}`,t)}}async testMovieVideos(){if(this.availableMovies.length===0){this.addTestResult("Movie Videos",!1,"No movies available for testing",null);return}try{const t=this.availableMovies[0],e=await this.makeApiCall(window.window.API_CONFIG.ACTIONS.MOVIE,{id:t.id,include_videos:!0}),s=e.videos?.length||0;this.addTestResult("Movie Videos",!0,`Found ${s} videos for "${t.title}"`,{movieId:t.id,title:t.title,videoCount:s,videos:e.videos})}catch(t){this.addTestResult("Movie Videos",!1,`Failed to load movie videos: ${t}`,t)}}async testSingleVote(){if(this.availableMovies.length===0){this.addTestResult("Single Vote",!1,"No movies available for testing",null);return}try{const t=this.availableMovies[0],e={movie_id:t.id,user_name:"test_user",vibe:5,seen:!0},s=await this.makeApiCall(window.window.API_CONFIG.ACTIONS.VOTE,{},"POST",e);this.addTestResult("Single Vote",!0,`Successfully submitted vote for "${t.title}"`,{vote:e,response:s})}catch(t){this.addTestResult("Single Vote",!1,`Failed to submit vote: ${t}`,t)}}async testBatchVote(){if(this.availableMovies.length<2){this.addTestResult("Batch Vote",!1,"Need at least 2 movies for batch voting test",null);return}try{const t=this.availableMovies.slice(0,2).map((s,i)=>({movie_id:s.id,user_name:"test_user",vibe:3+i,seen:i===0})),e=await this.makeApiCall(window.window.API_CONFIG.ACTIONS.BATCH_VOTE,{},"POST",{votes:t});this.addTestResult("Batch Vote",!0,`Successfully submitted ${t.length} votes`,{votes:t,response:e})}catch(t){this.addTestResult("Batch Vote",!1,`Failed to submit batch votes: ${t}`,t)}}async testAppealCalculation(){try{const t=await this.makeApiCall(window.window.API_CONFIG.ACTIONS.UPDATE_APPEAL),e=Object.keys(t.movies||{}).length;this.addTestResult("Appeal Calculation",!0,`Successfully calculated appeal for ${e} movies`,{movieCount:e,sample:Object.keys(t.movies||{}).slice(0,3)})}catch(t){this.addTestResult("Appeal Calculation",!1,`Failed to calculate appeal: ${t}`,t)}}async runAllTests(){this.testResults=[],this.updateTestDisplay();const t=[()=>this.testDebugStatus(),()=>this.testMovieList(),()=>this.testMovieSearch(),()=>this.testMovieDetails(),()=>this.testMovieVideos(),()=>this.testSingleVote(),()=>this.testBatchVote(),()=>this.testAppealCalculation()];for(const i of t)await i(),await new Promise(a=>setTimeout(a,100));const e=this.testResults.filter(i=>i.success).length,s=this.testResults.length;this.addTestResult("All Tests Summary",e===s,`Completed ${s} tests: ${e} passed, ${s-e} failed`,{passed:e,failed:s-e,total:s})}}document.addEventListener("DOMContentLoaded",()=>{new u});
