package views

import (
	"strconv"
	"time"
)

// AdminDashboardData represents data for the admin dashboard
type AdminDashboardData struct {
	AdminUser    AdminUserInfo
	Stats        AdminStats
	RecentMovies []MovieInfo
	RecentVotes  []VoteInfo
}

// AdminUserInfo represents admin user information
type AdminUserInfo struct {
	ID        int
	Username  string
	CreatedAt time.Time
	LastLogin *int64
}

// AdminStats represents various statistics
type AdminStats struct {
	TotalMovies    int
	TotalVotes     int
	UniqueVoters   int
	ActiveSessions int
	LastUpdated    time.Time
}

// MovieInfo represents movie information for display
type MovieInfo struct {
	ID        int
	Title     string
	Year      int
	VoteCount int
	AddedAt   time.Time
}

// VoteInfo represents vote information for display
type VoteInfo struct {
	ID         int
	MovieID    int
	MovieTitle string
	UserName   string
	Vibe       int
	Seen       bool
	VotedAt    time.Time
}

// AdminDashboard renders the admin dashboard
func AdminDashboard(data AdminDashboardData) templ.Component {
	return AdminDashboardLayout(data)
}

// AdminDashboardContent renders the admin dashboard content
func AdminDashboardContent(data AdminDashboardData) templ.Component {
	return AdminDashboardTemplate(data)
}

// AdminDashboardLayout renders the full admin dashboard page
func AdminDashboardLayout(data AdminDashboardData) templ.Component {
	return AdminDashboardPage(data)
}

templ AdminDashboardPage(data AdminDashboardData) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<meta name="description" content="Movie poll administration and management"/>
			<title>Admin Dashboard - Mewling Goat Tavern</title>
			<link rel="icon" sizes="16x16" href="/img/favicon-16x16.png"/>
			<link rel="icon" sizes="32x32" href="/img/favicon-32x32.png"/>
			<link rel="icon" sizes="192x192" href="/img/android-chrome-192x192.png"/>
			<link rel="icon" sizes="512x512" href="/img/android-chrome-512x512.png"/>
			<link rel="apple-touch-icon" sizes="180x180" href="/img/apple-touch-icon.png"/>
			<link rel="manifest" href="/site.webmanifest"/>
			<link rel="stylesheet" href="/css/style.css"/>
			<script defer src="/js/htmx.min.js"></script>
			<script>
				// Wait for HTMX to load before configuring it
				document.addEventListener('DOMContentLoaded', function() {
					// Configure HTMX to include cookies using the correct method
					htmx.config.withCredentials = true;
					
					// Debug: Check cookies
					console.log('All cookies:', document.cookie);
					console.log('Session cookie:', document.cookie.split(';').find(c => c.trim().startsWith('movie_poll_session')));
				});
			</script>
		</head>
		<body class="bg-gradient-to-br from-goat-900 via-goat-800 to-goat-900 min-h-screen">
			@AdminNavigation()
			@AdminDashboardTemplate(data)
			<script defer src="/js/script.js"></script>
		</body>
	</html>
}

templ AdminNavigation() {
	<nav class="mb-8 p-4">
		<div class="container mx-auto">
			<div class="flex items-center justify-between">
				<!-- Logo/Brand -->
				<a href="/" class="text-2xl font-bold text-tavern-400 hover:text-tavern-300 transition-colors">
					🎬 Mewling Goat Tavern
				</a>
				<!-- Navigation Links -->
				<div class="flex items-center space-x-6">
					<a href="/" class="text-goat-300 hover:text-tavern-400 transition-colors">
						Home
					</a>
					<a href="/results" class="text-goat-300 hover:text-tavern-400 transition-colors">
						Results
					</a>
					<a href="/admin" class="text-tavern-400 font-semibold">
						Admin
					</a>
				</div>
			</div>
		</div>
	</nav>
}

templ AdminDashboardTemplate(data AdminDashboardData) {
	<div class="p-4">
		<div class="container mx-auto max-w-7xl">
			<!-- Header -->
			<div class="flex justify-between items-center mb-8">
				<div>
					<h1 class="text-4xl font-bold text-tavern-500 mb-2">🔧 Admin Dashboard</h1>
					<p class="text-goat-300">Welcome back, { data.AdminUser.Username }</p>
				</div>
				<div class="flex space-x-4">
					<a href="/admin/movies" class="bg-tavern-500 hover:bg-tavern-600 text-white px-4 py-2 rounded-lg transition-colors">
						Manage Movies
					</a>
					<a href="/admin/users" class="bg-goat-600 hover:bg-goat-500 text-white px-4 py-2 rounded-lg transition-colors">
						Manage Users
					</a>
					<a href="/admin/test" class="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg transition-colors">
						Test Page
					</a>
					<button
						class="bg-orange-600 hover:bg-orange-700 text-white px-4 py-2 rounded-lg transition-colors"
						hx-post="/api/admin/cleanup-duplicates"
						hx-confirm="Are you sure you want to remove duplicate movies? This action cannot be undone."
						hx-target="#cleanup-result"
						hx-swap="innerHTML"
					>
						Clean Duplicates
					</button>
					<a href="/" class="bg-goat-700 hover:bg-goat-600 text-white px-4 py-2 rounded-lg transition-colors">
						View Poll
					</a>
					<button
						class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition-colors"
						hx-post="/api/admin/logout"
						hx-target="body"
						hx-swap="outerHTML"
					>
						Logout
					</button>
				</div>
			</div>
			<!-- Cleanup Result -->
			<div id="cleanup-result"></div>
			<!-- Stats Grid -->
			@AdminStatsCards(data.Stats)
			<!-- Recent Movies -->
			@RecentMoviesSection(data.RecentMovies)
			<!-- Recent Votes -->
			@RecentVotesSection(data.RecentVotes)
		</div>
	</div>
}

templ AdminStatsCards(stats AdminStats) {
	<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
		<div class="bg-goat-700 p-6 rounded-xl shadow-lg">
			<div class="flex items-center">
				<div class="p-3 bg-tavern-500 rounded-lg">
					<svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 4V2a1 1 0 011-1h8a1 1 0 011 1v2h3a1 1 0 110 2h-1v12a2 2 0 01-2 2H7a2 2 0 01-2-2V6H4a1 1 0 110-2h3zM9 6v10h6V6H9z"></path>
					</svg>
				</div>
				<div class="ml-4">
					<p class="text-sm font-medium text-goat-300">Total Movies</p>
					<p class="text-2xl font-bold text-white">{ strconv.Itoa(stats.TotalMovies) }</p>
				</div>
			</div>
		</div>
		<div class="bg-goat-700 p-6 rounded-xl shadow-lg">
			<div class="flex items-center">
				<div class="p-3 bg-blue-500 rounded-lg">
					<svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
					</svg>
				</div>
				<div class="ml-4">
					<p class="text-sm font-medium text-goat-300">Total Votes</p>
					<p class="text-2xl font-bold text-white">{ strconv.Itoa(stats.TotalVotes) }</p>
				</div>
			</div>
		</div>
		<div class="bg-goat-700 p-6 rounded-xl shadow-lg">
			<div class="flex items-center">
				<div class="p-3 bg-green-500 rounded-lg">
					<svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
					</svg>
				</div>
				<div class="ml-4">
					<p class="text-sm font-medium text-goat-300">Unique Voters</p>
					<p class="text-2xl font-bold text-white">{ strconv.Itoa(stats.UniqueVoters) }</p>
				</div>
			</div>
		</div>
		<div class="bg-goat-700 p-6 rounded-xl shadow-lg">
			<div class="flex items-center">
				<div class="p-3 bg-purple-500 rounded-lg">
					<svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
					</svg>
				</div>
				<div class="ml-4">
					<p class="text-sm font-medium text-goat-300">Active Sessions</p>
					<p class="text-2xl font-bold text-white">{ strconv.Itoa(stats.ActiveSessions) }</p>
				</div>
			</div>
		</div>
	</div>
}

templ RecentMoviesSection(movies []MovieInfo) {
	<div class="bg-goat-800 rounded-lg p-6 mb-8">
		<div class="flex justify-between items-center mb-6">
			<h2 class="text-2xl font-bold text-tavern-400">Recent Movies</h2>
			<a href="/admin/movies" class="text-tavern-400 hover:text-tavern-300 text-sm">
				View All →
			</a>
		</div>
		<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
			if len(movies) == 0 {
				<div class="col-span-full text-center py-8 text-goat-400">
					<p>No movies added yet</p>
				</div>
			} else {
				for _, movie := range movies {
					@AdminMovieCard(movie)
				}
			}
		</div>
	</div>
}

templ RecentVotesSection(votes []VoteInfo) {
	<div class="bg-goat-800 rounded-lg p-6 mb-8">
		<div class="flex justify-between items-center mb-6">
			<h2 class="text-2xl font-bold text-tavern-400">Recent Votes</h2>
			<a href="/admin/users" class="text-tavern-400 hover:text-tavern-300 text-sm">
				View All →
			</a>
		</div>
		<div class="space-y-4">
			if len(votes) == 0 {
				<div class="text-center py-8 text-goat-400">
					<p>No votes cast yet</p>
				</div>
			} else {
				for _, vote := range votes {
					@VoteCard(vote)
				}
			}
		</div>
	</div>
}

templ AdminMovieCard(movie MovieInfo) {
	<div class="bg-goat-700 rounded-lg p-4 hover:bg-goat-600 transition-colors">
		<h3 class="font-bold text-tavern-400 mb-2 line-clamp-2">
			{ movie.Title }
		</h3>
		if movie.Year > 0 {
			<p class="text-goat-300 text-sm mb-2">({ strconv.Itoa(movie.Year) })</p>
		}
		<div class="flex justify-between items-center text-sm text-goat-400">
			<span>Votes: { strconv.Itoa(movie.VoteCount) }</span>
			<span>Added: { movie.AddedAt.Format("Jan 2, 2006") }</span>
		</div>
	</div>
}

templ VoteCard(vote VoteInfo) {
	<div class="bg-goat-700 rounded-lg p-4 flex items-center justify-between">
		<div class="flex-1">
			<div class="flex items-center space-x-4">
				<div class="flex-shrink-0">
					if vote.Seen {
						<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
							✅ Seen
						</span>
					} else {
						<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
							❌ Not Seen
						</span>
					}
				</div>
				<div>
					<p class="text-sm font-medium text-goat-200">{ vote.MovieTitle }</p>
					<p class="text-sm text-goat-400">by { vote.UserName } • { vote.VotedAt.Format("Jan 2, 15:04") }</p>
				</div>
			</div>
		</div>
		<div class="flex-shrink-0">
			<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-tavern-100 text-tavern-800">
				Vibe: { strconv.Itoa(vote.Vibe) }
			</span>
		</div>
	</div>
}
