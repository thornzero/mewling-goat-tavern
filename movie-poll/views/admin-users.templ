package views

import (
	"fmt"
	"github.com/thornzero/movie-poll/models"
)

// Helper functions for type conversion
func getFloat64FromMap(m map[string]interface{}, key string) float64 {
	if val, ok := m[key]; ok {
		if f, ok := val.(float64); ok {
			return f
		}
	}
	return 0
}

func getStringFromMap(m map[string]interface{}, key string) string {
	if val, ok := m[key]; ok {
		if s, ok := val.(string); ok {
			return s
		}
	}
	return ""
}

type AdminUsersData struct {
	Users     []models.User
	UserStats map[string]interface{}
}

templ AdminUsersPage(data AdminUsersData) {
	@BaseLayout("Admin - Users", "User management for admin panel", AdminUsersContent(data))
}

templ AdminUsersContent(data AdminUsersData) {
	<div class="container mx-auto px-4 py-8">
		<div class="mb-8">
			<h1 class="text-3xl font-bold text-gray-900 mb-4">User Management</h1>
			<p class="text-gray-600">Manage users and their voting activity</p>
		</div>
		<!-- User Statistics -->
		<div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
			<div class="bg-white rounded-lg shadow p-6">
				<div class="flex items-center">
					<div class="flex-shrink-0">
						<div class="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
							<svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
							</svg>
						</div>
					</div>
					<div class="ml-4">
						<p class="text-sm font-medium text-gray-500">Total Users</p>
						<p class="text-2xl font-semibold text-gray-900">{ fmt.Sprintf("%.0f", getFloat64FromMap(data.UserStats, "total_users")) }</p>
					</div>
				</div>
			</div>
			<div class="bg-white rounded-lg shadow p-6">
				<div class="flex items-center">
					<div class="flex-shrink-0">
						<div class="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center">
							<svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
							</svg>
						</div>
					</div>
					<div class="ml-4">
						<p class="text-sm font-medium text-gray-500">Active Users (30d)</p>
						<p class="text-2xl font-semibold text-gray-900">{ fmt.Sprintf("%.0f", getFloat64FromMap(data.UserStats, "active_users")) }</p>
					</div>
				</div>
			</div>
			<div class="bg-white rounded-lg shadow p-6">
				<div class="flex items-center">
					<div class="flex-shrink-0">
						<div class="w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center">
							<svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
							</svg>
						</div>
					</div>
					<div class="ml-4">
						<p class="text-sm font-medium text-gray-500">Total Votes</p>
						<p class="text-2xl font-semibold text-gray-900">{ fmt.Sprintf("%.0f", getFloat64FromMap(data.UserStats, "total_votes")) }</p>
					</div>
				</div>
			</div>
			<div class="bg-white rounded-lg shadow p-6">
				<div class="flex items-center">
					<div class="flex-shrink-0">
						<div class="w-8 h-8 bg-orange-500 rounded-full flex items-center justify-center">
							<svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"></path>
							</svg>
						</div>
					</div>
					<div class="ml-4">
						<p class="text-sm font-medium text-gray-500">Avg Votes/User</p>
						<p class="text-2xl font-semibold text-gray-900">{ fmt.Sprintf("%.1f", data.UserStats["avg_votes_per_user"]) }</p>
					</div>
				</div>
			</div>
		</div>
		<!-- Users Table -->
		<div class="bg-white shadow rounded-lg">
			<div class="px-6 py-4 border-b border-gray-200">
				<h3 class="text-lg font-medium text-gray-900">Users ({ len(data.Users) })</h3>
			</div>
			<div class="overflow-x-auto">
				<table class="min-w-full divide-y divide-gray-200">
					<thead class="bg-gray-50">
						<tr>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Device ID</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Votes</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Seen/Not Seen</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Avg Vibe</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Seen</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
						</tr>
					</thead>
					<tbody class="bg-white divide-y divide-gray-200">
						for _, user := range data.Users {
							<tr>
								<td class="px-6 py-4 whitespace-nowrap">
									<div class="flex items-center">
										<div class="flex-shrink-0 h-10 w-10">
											<div class="h-10 w-10 rounded-full bg-blue-500 flex items-center justify-center">
												<span class="text-sm font-medium text-white">{ user.UserName[:1] }</span>
											</div>
										</div>
										<div class="ml-4">
											<div class="text-sm font-medium text-gray-900">{ user.UserName }</div>
											<div class="text-sm text-gray-500">ID: { user.ID }</div>
										</div>
									</div>
								</td>
								<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 font-mono">{ user.DeviceID[:8] }...</td>
								<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{ user.VoteCount }</td>
								<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
									<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
										{ user.MoviesSeenCount } seen
									</span>
									<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800 ml-1">
										{ user.MoviesNotSeenCount } not seen
									</span>
								</td>
								<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
									<div class="flex items-center">
										<span class="text-lg">{ fmt.Sprintf("%.1f", user.AverageVibe) }</span>
										<div class="ml-2 flex">
											for i := 1; i <= 6; i++ {
												if float64(i) <= user.AverageVibe {
													<span class="text-yellow-400">‚òÖ</span>
												} else {
													<span class="text-gray-300">‚òÖ</span>
												}
											}
										</div>
									</div>
								</td>
								<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
									{ user.LastSeen.Format("Jan 2, 2006 3:04 PM") }
								</td>
								<td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
									<div class="flex space-x-2">
										<button
											hx-post="/api/admin/user-update-stats"
											hx-vals='{"user_name": "{ user.UserName }", "device_id": "{ user.DeviceID }"}'
											hx-target="#user-{ user.ID }"
											hx-indicator="#loading-{ user.ID }"
											class="text-blue-600 hover:text-blue-900 text-xs"
										>
											Update Stats
										</button>
										<button
											hx-post="/api/admin/user-delete"
											hx-vals='{"user_name": "{ user.UserName }", "device_id": "{ user.DeviceID }"}'
											hx-confirm="Are you sure you want to delete this user and all their votes?"
											hx-target="#user-{ user.ID }"
											hx-swap="outerHTML"
											class="text-red-600 hover:text-red-900 text-xs"
										>
											Delete
										</button>
									</div>
									<div id="loading-{ user.ID }" class="htmx-indicator">
										<span class="text-xs text-gray-500">Updating...</span>
									</div>
								</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>
		<!-- Most Active User -->
		if data.UserStats["most_active_user"] != nil {
			<div class="mt-8 bg-white shadow rounded-lg p-6">
				<h3 class="text-lg font-medium text-gray-900 mb-4">Most Active User</h3>
				<div class="flex items-center">
					<div class="flex-shrink-0 h-12 w-12">
						<div class="h-12 w-12 rounded-full bg-yellow-500 flex items-center justify-center">
							<span class="text-lg font-medium text-white">üèÜ</span>
						</div>
					</div>
					<div class="ml-4">
						<div class="text-lg font-medium text-gray-900">{ getStringFromMap(data.UserStats, "most_active_user") }</div>
						<div class="text-sm text-gray-500">{ fmt.Sprintf("%.0f votes", getFloat64FromMap(data.UserStats, "most_active_votes")) }</div>
					</div>
				</div>
			</div>
		}
	</div>
}
