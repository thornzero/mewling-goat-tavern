package views

import (
	"github.com/ryanbradynd05/go-tmdb"
	"strconv"
)

type AdminMoviesData struct {
	AdminUser AdminUserInfo
	Movies    []MovieInfo
}

templ AdminMoviesPage(data AdminMoviesData) {
	@BaseLayout("Admin Movies", "Manage movies in the poll", AdminMoviesContent(data))
}

templ AdminMoviesContent(data AdminMoviesData) {
	<div class="min-h-screen bg-gradient-to-br from-goat-900 via-goat-800 to-goat-900">
		<div class="container mx-auto px-4 py-8">
			<!-- Header -->
			<div class="flex justify-between items-center mb-8">
				<div>
					<h1 class="text-4xl font-bold text-tavern-400 mb-2">üé¨ Movie Management</h1>
					<p class="text-goat-300">Manage movies in the poll</p>
				</div>
				<div class="flex space-x-4">
					<a href="/admin/dashboard" class="bg-tavern-500 hover:bg-tavern-600 text-white px-4 py-2 rounded-lg transition-colors">
						‚Üê Back to Dashboard
					</a>
					<button
						class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition-colors"
						hx-post="/api/admin/cleanup-duplicates"
						hx-confirm="Are you sure you want to remove duplicate movies? This action cannot be undone."
						hx-target="#cleanup-result"
						hx-swap="innerHTML"
					>
						Clean Duplicates
					</button>
				</div>
			</div>
			<!-- Cleanup Result -->
			<div id="cleanup-result"></div>
			<!-- Movie Search -->
			@MovieSearchSection()
			<!-- Movie Import -->
			@MovieImportSection()
			<!-- Movies List -->
			<div class="bg-goat-800 rounded-lg p-6">
				<div class="flex justify-between items-center mb-6">
					<h2 class="text-2xl font-bold text-tavern-400">
						Movies in Poll ({ strconv.Itoa(len(data.Movies)) })
					</h2>
					<div class="text-sm text-goat-400">
						Last updated: { data.AdminUser.Username }
					</div>
				</div>
				if len(data.Movies) == 0 {
					@EmptyMoviesState()
				} else {
					@MoviesList(data.Movies)
				}
			</div>
		</div>
	</div>
}

templ MovieSearchSection() {
	<div class="bg-goat-800 rounded-lg p-6 mb-8">
		<h2 class="text-2xl font-bold text-tavern-400 mb-4">üîç Add New Movies</h2>
		<div class="max-w-2xl">
			<form hx-get="/api/search" hx-target="#search-results" hx-swap="innerHTML" hx-trigger="submit, keyup delay:500ms from:input[name='q']" class="flex gap-4">
				<input
					type="text"
					name="q"
					placeholder="Search for movies to add..."
					class="flex-1 px-4 py-3 bg-goat-700 text-goat-100 rounded-lg border border-goat-600 focus:border-tavern-400 focus:outline-none focus:ring-2 focus:ring-tavern-400/20"
				/>
				<button
					type="submit"
					class="px-6 py-3 bg-tavern-500 hover:bg-tavern-600 text-white rounded-lg transition-colors font-semibold"
				>
					Search
				</button>
			</form>
		</div>
		<!-- Search Results -->
		<div id="search-results" class="mt-6">
			<p class="text-goat-400 text-center py-8">Enter a search term to find movies</p>
		</div>
	</div>
}

templ SearchResults(searchResults []tmdb.MovieShort) {
	if len(searchResults) == 0 {
		<div class="text-center py-8">
			<p class="text-goat-400">No movies found. Try a different search term.</p>
		</div>
	} else {
		<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
			for _, movie := range searchResults {
				<div class="bg-goat-700 rounded-lg p-4 border border-goat-600 hover:border-tavern-400 transition-colors">
					<div class="flex gap-4">
						if movie.PosterPath != "" {
							<img
								src={ "https://image.tmdb.org/t/p/w200" + movie.PosterPath }
								alt={ movie.Title + " poster" }
								class="w-16 h-24 object-cover rounded"
							/>
						} else {
							<div class="w-16 h-24 bg-goat-600 rounded flex items-center justify-center">
								<span class="text-goat-400 text-xs">No Image</span>
							</div>
						}
						<div class="flex-1">
							<h3 class="font-semibold text-goat-100 text-lg mb-1">{ movie.Title }</h3>
							if movie.ReleaseDate != "" {
								<p class="text-goat-400 text-sm mb-2">Released: { movie.ReleaseDate }</p>
							}
							if movie.Overview != "" {
								<p class="text-goat-300 text-sm line-clamp-3">{ movie.Overview }</p>
							}
							<div class="mt-3 flex gap-2">
								<button
									hx-post="/api/admin/add-movie"
									hx-vals={ `{"tmdb_id": ` + strconv.Itoa(movie.ID) + `, "title": "` + movie.Title + `", "year": ` + strconv.Itoa(func() int {
	if len(movie.ReleaseDate) >= 4 {
		year, _ := strconv.Atoi(movie.ReleaseDate[:4])
		return year
	} else {
		return 0
	}
}()) + `}` }
									hx-target="#search-results"
									hx-swap="innerHTML"
									class="px-3 py-1 bg-tavern-500 hover:bg-tavern-600 text-white text-sm rounded transition-colors"
								>
									Add Movie
								</button>
							</div>
						</div>
					</div>
				</div>
			}
		</div>
	}
}

templ MovieImportSection() {
	<div class="bg-goat-800 rounded-lg p-6 mb-8">
		<h2 class="text-2xl font-bold text-tavern-400 mb-4">üì• Import Movies from JSON</h2>
		<p class="text-goat-300 mb-4">Import movies from a JSON file in the export format</p>
		<div class="max-w-2xl">
			<form hx-post="/api/admin/import-movies" hx-target="#import-results" hx-swap="innerHTML" enctype="multipart/form-data">
				<div class="mb-4">
					<label for="json-file" class="block text-sm font-medium text-goat-200 mb-2">
						Select JSON file
					</label>
					<input
						type="file"
						id="json-file"
						name="json_file"
						accept=".json"
						required
						class="w-full px-4 py-3 bg-goat-700 text-goat-100 rounded-lg border border-goat-600 focus:border-tavern-400 focus:outline-none focus:ring-2 focus:ring-tavern-400/20 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-tavern-500 file:text-white hover:file:bg-tavern-600"
					/>
				</div>
				<div class="flex items-center gap-4">
					<button
						type="submit"
						class="px-6 py-3 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors font-semibold flex items-center gap-2"
					>
						<span>üì•</span>
						Import Movies
					</button>
					<div class="text-sm text-goat-400">
						Expected format: Array of objects with title, year, tmdb_id
					</div>
				</div>
			</form>
		</div>
		<!-- Import Results -->
		<div id="import-results" class="mt-6">
			<!-- Results will appear here -->
		</div>
	</div>
}

templ EmptyMoviesState() {
	<div class="text-center py-12">
		<div class="text-6xl mb-4">üé¨</div>
		<h3 class="text-2xl font-bold text-goat-300 mb-2">No Movies Yet</h3>
		<p class="text-goat-400">Use the search above to add movies to the poll</p>
	</div>
}

templ MoviesList(movies []MovieInfo) {
	<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
		for _, movie := range movies {
			@AdminMoviesMovieCard(movie)
		}
	</div>
}

templ AdminMoviesMovieCard(movie MovieInfo) {
	<div class="bg-goat-700 rounded-lg p-4 hover:bg-goat-600 transition-colors">
		<div class="flex justify-between items-start mb-2">
			<h3 class="font-bold text-tavern-400 line-clamp-2">
				{ movie.Title }
			</h3>
			<span class="text-xs text-goat-400 ml-2">
				ID: { strconv.Itoa(movie.ID) }
			</span>
		</div>
		if movie.Year > 0 {
			<p class="text-goat-300 text-sm mb-2">({ strconv.Itoa(movie.Year) })</p>
		}
		<div class="flex justify-between items-center text-sm text-goat-400">
			<span>Votes: { strconv.Itoa(movie.VoteCount) }</span>
			<span>Added: { movie.AddedAt.Format("Jan 2, 2006") }</span>
		</div>
		<div class="mt-3 flex space-x-2">
			<button
				class="text-red-400 hover:text-red-300 text-sm"
				hx-delete={ "/api/admin/movies/" + strconv.Itoa(movie.ID) }
				hx-confirm="Are you sure you want to delete this movie? This action cannot be undone."
				hx-target="closest .bg-goat-700"
				hx-swap="outerHTML"
			>
				Delete
			</button>
		</div>
	</div>
}
